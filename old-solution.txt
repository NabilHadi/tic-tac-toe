let sqrOfLength = Math.sqrt(boardArray.length);
      let index = Number(position);
      let rowIndex;
      let columnIndex;
      let result = {};

      for (let i = 0; i < boardArray.length; i = i + sqrOfLength) {
        if (index >= i && index < i + sqrOfLength) {
          rowIndex = i / sqrOfLength;
          columnIndex = index - i;
        }
      }

      let rowArray = [];
      for (
        let i = rowIndex * sqrOfLength;
        i < rowIndex * sqrOfLength + sqrOfLength;
        i++
      ) {
        rowArray.push(i);
      }

      let columnArray = [];
      for (let i = columnIndex; i < sqrOfLength ** 2; i = i + sqrOfLength) {
        columnArray.push(i);
      }

      console.log(`row index: ${rowIndex}`);
      console.log(`column index: ${columnIndex}`);
      console.log(`column array: ${columnArray}`);
      console.log(`row array: ${rowArray}`);

if (rowArray[columnIndex - 2] || rowArray[columnIndex - 2] === 0) {
        if (
          boardArray[index].state ===
            boardArray[rowArray[columnIndex - 1]].state &&
          boardArray[index].state ===
            boardArray[rowArray[columnIndex - 2]].state
        ) {
          console.log("win by prev 2 columns");
          return {
            isWin: true,
            coordinates: [
              index,
              rowArray[columnIndex - 1],
              rowArray[columnIndex - 2],
            ],
          };
        }
      } else if (rowArray[columnIndex + 2]) {
        if (
          boardArray[index].state ===
            boardArray[rowArray[columnIndex + 1]].state &&
          boardArray[index].state ===
            boardArray[rowArray[columnIndex + 2]].state
        ) {
          console.log("win by next 2 columns");
          return {
            isWin: true,
            coordinates: [
              index,
              rowArray[columnIndex + 1],
              rowArray[columnIndex + 2],
            ],
          };
        }
      } else if (
        rowArray[columnIndex + 1] &&
        (rowArray[columnIndex - 1] || rowArray[columnIndex - 1] === 0)
      ) {
        if (
          boardArray[index].state ===
            boardArray[rowArray[columnIndex + 1]].state &&
          boardArray[index].state ===
            boardArray[rowArray[columnIndex - 1]].state
        ) {
          console.log("win by middle column");
          return {
            isWin: true,
            coordinates: [
              index,
              rowArray[columnIndex + 1],
              rowArray[columnIndex - 1],
            ],
          };
        }
      }

      if (columnArray[rowIndex - 2] || columnArray[rowIndex - 2] === 0) {
        if (
          boardArray[index].state ===
            boardArray[columnArray[rowIndex - 1]].state &&
          boardArray[index].state ===
            boardArray[columnArray[rowIndex - 2]].state
        ) {
          console.log("win by prev 2 rows");
          return {
            isWin: true,
            coordinates: [
              index,
              columnArray[rowIndex - 1],
              columnArray[rowIndex - 2],
            ],
          };
        }
      } else if (columnArray[rowIndex + 2]) {
        if (
          boardArray[index].state ===
            boardArray[columnArray[rowIndex + 1]].state &&
          boardArray[index].state ===
            boardArray[columnArray[rowIndex + 2]].state
        ) {
          console.log("win by next 2 rows");
          return {
            isWin: true,
            coordinates: [
              index,
              columnArray[rowIndex + 1],
              columnArray[rowIndex + 2],
            ],
          };
        }
      } else if (
        columnArray[rowIndex + 1] &&
        (columnArray[rowIndex - 1] || columnArray[rowIndex - 1] === 0)
      ) {
        if (
          boardArray[index].state ===
            boardArray[columnArray[rowIndex + 1]].state &&
          boardArray[index].state ===
            boardArray[columnArray[rowIndex - 1]].state
        ) {
          console.log("win by middle rows");
          return {
            isWin: true,
            coordinates: [
              index,
              columnArray[rowIndex + 1],
              columnArray[rowIndex - 1],
            ],
          };
        }
      }

      if (boardArray[index + (sqrOfLength + 1) * 2]) {
        if (
          boardArray[index].state ===
            boardArray[index + (sqrOfLength + 1)].state &&
          boardArray[index].state ===
            boardArray[index + (sqrOfLength + 1) * 2].state
        ) {
          console.log("win by bottom right diagonal");
          return {
            isWin: true,
            coordinates: [
              index,
              index + (sqrOfLength + 1),
              index + (sqrOfLength + 1) * 2,
            ],
          };
        }
      } else if (boardArray[index - (sqrOfLength + 1) * 2]) {
        if (
          boardArray[index].state ===
            boardArray[index - (sqrOfLength + 1)].state &&
          boardArray[index].state ===
            boardArray[index - (sqrOfLength + 1) * 2].state
        ) {
          console.log("win by top left diagonal");
          return {
            isWin: true,
            coordinates: [
              index,
              index - (sqrOfLength + 1),
              index - (sqrOfLength + 1) * 2,
            ],
          };
        }
      } else if (
        boardArray[index + (sqrOfLength + 1)] &&
        boardArray[index - (sqrOfLength + 1)]
      ) {
        if (
          boardArray[index].state ===
            boardArray[index + (sqrOfLength + 1)].state &&
          boardArray[index].state ===
            boardArray[index - (sqrOfLength + 1)].state
        ) {
          console.log("win by topLeft middle bottomRight diagonal");
          return {
            isWin: true,
            coordinates: [
              index,
              index + (sqrOfLength + 1),
              index - (sqrOfLength + 1),
            ],
          };
        }
      }

      if (boardArray[index + sqrOfLength * 2]) {
        if (
          boardArray[index].state ===
            boardArray[index + (sqrOfLength - 1)].state &&
          boardArray[index].state ===
            boardArray[index + (sqrOfLength - 1) * 2].state
        ) {
          console.log("win by bottom left diagonal");
          return {
            isWin: true,
            coordinates: [
              index,
              index + (sqrOfLength - 1),
              index + (sqrOfLength - 1) * 2,
            ],
          };
        }
      } else if (boardArray[index - sqrOfLength * 2]) {
        if (
          boardArray[index].state ===
            boardArray[index - (sqrOfLength - 1)].state &&
          boardArray[index].state ===
            boardArray[index - (sqrOfLength - 1) * 2].state
        ) {
          console.log("win by top right diagonal");
          return {
            isWin: true,
            coordinates: [
              index,
              index - (sqrOfLength - 1),
              index - (sqrOfLength - 1) * 2,
            ],
          };
        }
      } else if (
        boardArray[index + sqrOfLength] &&
        boardArray[index - sqrOfLength] &&
        index - sqrOfLength < rowArray[0]
      ) {
        if (
          boardArray[index].state ===
            boardArray[index + (sqrOfLength - 1)].state &&
          boardArray[index].state === boardArray[index - sqrOfLength].state
        ) {
          console.log("win by bottomRight middle topLeft diagonal");
          return {
            isWin: true,
            coordinates: [
              index,
              index + (sqrOfLength - 1),
              index - sqrOfLength,
            ],
          };
        }
      }